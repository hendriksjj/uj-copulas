indices <- colnames(df_full)[3:ncol(df_full)]
df_resid <- data.frame(Date = df_full$Date)
spec_save <- data.frame()
source('filteredData.R')
df_full <- read.csv('CLEAN_DATA.csv')
# Descriptive Statistics
descr_stats(df_full[,3:ncol(df_full)])
# Correlation
corr(df_full)
# Steps before model fit
indices <- colnames(df_full)[3:ncol(df_full)]
df_resid <- data.frame(Date = df_full$Date)
indices
df_resid
spec_save <- data.frame()
# Model fit and residual calculations
for(index in indices){
print(index)
y <- df_full[,index]
final_spec <- fun_garch_spec(y, p_max = 1, q_max = 1, r_max = 1, s_max = 1)
fit <- NULL
resid <- NULL
attempt <- 0
while((is.null(fit) || is.null(resid)) && attempt < nrow(final_spec)){
attempt <- attempt + 1
spec=ugarchspec(mean.model = list(armaOrder = c(final_spec[attempt,'AR'], final_spec[attempt,'MA']), include.mean = TRUE, archm = FALSE, external.regressors = NULL), variance.model = list(model = final_spec[attempt,'Model'], submodel = if(final_spec[attempt,'SubModel']==0) NULL else final_spec[attempt,'SubModel'], garchOrder = c(final_spec[attempt,'G'], final_spec[attempt,'ARCH'])),distribution.model = final_spec[attempt,'Dist'])
fit <- ugarchfit(spec, data=y, solver = final_spec[attempt,'solver'])
resid <- fit@fit$residuals
# std_resid <- (resid - mean(resid))/sd(resid)
}
df_resid <- cbind(df_resid, resid)
spec_save <- rbind(spec_save,
cbind(index, final_spec[attempt,]))
}
warnings()
oldw <- getOption("warn")
oldw
options(warn = -1)
# Write filtered data
colnames(df_resid) <- c('Date',as.character(spec_save$index))
write.csv(df_resid, 'FILTERED_DATA.csv')
# Write model output
model_output(spec_save)
# MAIN
oldScipen <- getOption("scipen")
oldScipen
options(scipen = 99)
# Write model output
model_output(spec_save)
# Pull in functions for copula fitting
source('copulaFit')
# Pull in functions for copula fitting
source('copulaFit.R')
df_full <- read.csv('FILTERED_DATA.csv')
head(df_full)
colnames(df_full) <- colnames(df_full) %>%
stringr::str_replace_all('_', ' ') %>%
lapply(FUN = simpleCap) %>%
unlist()
indices <- colnames(df_full)[3:17]
df_indices <- df_full[,indices]
df_indices_std <- scale(df_indices)
copdata <- pobs(df_indices_std)
df_copula_class <- read.csv('copula_class.csv')
df_copula_class
df_copula_class$Code[-1]
rvm <- RVineStructureSelect(copdata,
familyset = 1,
progress = TRUE)
rvm
copula_results(copdata, rvm)
copula_results <- function(copdata, rvm){
copula_families <- rvm$family
copula_par_1 <- rvm$par
copula_par_2 <- rvm$par2
copula_names <- rvm$names
count = 0
for(i in 1:(ncol(copula_families) - 1)){
for(j in (i + 1):(nrow(copula_families))){
left_index_name <- copula_names[i] %>%
stringr::str_replace_all('_', ' ') %>%
lapply(FUN = simpleCap) %>%
unlist()
right_index_name <- copula_names[j] %>%
stringr::str_replace_all('_', ' ') %>%
lapply(FUN = simpleCap) %>%
unlist()
copula_family <- df_copula_class[df_copula_class$Code == copula_families[j, i],]$Copula %>%
as.character() %>%
stringr::str_squish() %>%
simpleCap()
if(count == 0){
df_ret <- data.frame(Indices = paste(left_index_name, right_index_name, sep = ' and '),
copula_family,
Param1 = copula_par_1[j, i],
Param2 = copula_par_2[j, i])
} else {
df_ret <- rbind(df_ret,
data.frame(Indices = paste(left_index_name, right_index_name, sep = ' and '),
copula_family,
Param1 = copula_par_1[j, i],
Param2 = copula_par_2[j, i])
)
}
count = count + 1
}
}
write.csv(df_ret, 'Copula Results.csv')
return(TRUE)
}
copula_results(copdata, rvm)
# Save the rvm object
saveRDS(rvm, "rvm.rds")
# Simulation Parameters
lower_perc <- 0.01
upper_perc <- 0.99
sim_size <- 10000 #10000
number_of_sims <- 500 # 500
# Simulation Parameters
lower_perc <- 0.01
upper_perc <- 0.99
sim_size <- 100 #10000
number_of_sims <- 10 # 500
results <- simu_TDC(rvm, lower_perc, upper_perc, sim_size, number_of_sims)
results
write.csv(results$aggregated_results,'aggregated_results.csv')
write.csv(results$raw_simulations,'raw_simulations.csv')
aggregated_results <- read.csv('aggregated_results.csv')
df_final <- df_return_from_agg(aggregated_results)
write.csv(df_final, 'Copula Results.csv')
# set options for project
oldScipen <- getOption("scipen")
oldw <- getOption("warn")
options(warn = -1)
options(scipen = 99)
# pull in functions needed for marginal model fitting
source('filteredData.R')
df_full <- read.csv('CLEAN_DATA.csv')
# Descriptive Statistics
descr_stats(df_full[,3:ncol(df_full)])
# Writes Descriptive Statistics.csv
descr_stats <- function(df_indices){
library(psych)
library(tseries)
colnames(df_indices) <- colnames(df_indices) %>%
stringr::str_replace_all('_', ' ') %>%
lapply(FUN = simpleCap) %>%
unlist()
descr <- psych::describe(df_indices) %>%
as.data.frame() %>%
select(n, mean, sd, skew, kurtosis)
descr$Country_Sector <- row.names(descr)
jb_p_val <- apply(X = df_indices, 2 , FUN = function(x) jarque.bera.test(x)$p.value) %>%
data.frame()
colnames(jb_p_val) <- 'Jarque-Bera p-value'
jb_p_val$Country_Sector <- row.names(jb_p_val)
jb_test_stat <- apply(X = df_indices, 2 , FUN = function(x) jarque.bera.test(x)$statistic) %>%
data.frame()
colnames(jb_test_stat) <- 'Jarque-Bera test statistic'
jb_test_stat$Country_Sector <- row.names(jb_test_stat)
descr <- descr %>%
inner_join(jb_test_stat) %>%
inner_join(jb_p_val)
descr <- descr %>%
inner_join(descr$Country_Sector %>%
lapply(country_sector) %>%
rbind_list())
df_ret <- descr %>%
select(Country, Sector, Mean = mean, `Standard Deviation` = sd, Skewness = skew, Kurtosis = kurtosis, `Jarque-Bera test statistic`) %>%
mutate_if(is.numeric, round, 4)
df_ret$Country[duplicated(df_ret$Country)] = ''
write.csv(df_ret, 'finalResults//Descriptive Statistics.csv')
return(TRUE)
}
# Descriptive Statistics
descr_stats(df_full[,3:ncol(df_full)])
# Writes correlations.csv
corr <- function(df_full){
df_indices <- df_full[,3:ncol(df_full)]
cc <- colnames(df_indices) %>%
stringr::str_replace_all('_', ' ') %>%
lapply(FUN = simpleCap) %>%
unlist() %>%
lapply(country_sector) %>%
rbind_list() %>%
mutate(' ' = paste(Country, Sector)) %>%
select(' ') %>%
as.vector()
colnames(df_indices) <- cc$` `
write.csv(round(cor(df_indices), 4), 'finalResults//correlations.csv')
return(TRUE)
}
# Correlation
corr(df_full)
# Steps before model fit
indices <- colnames(df_full)[3:ncol(df_full)]
indices
df_resid <- data.frame(Date = df_full$Date)
spec_save <- data.frame()
# Model fit and residual calculations
for(index in indices){
print(index)
y <- df_full[,index]
final_spec <- fun_garch_spec(y, p_max = 1, q_max = 1, r_max = 1, s_max = 1)
fit <- NULL
resid <- NULL
attempt <- 0
while((is.null(fit) || is.null(resid)) && attempt < nrow(final_spec)){
attempt <- attempt + 1
spec=ugarchspec(mean.model = list(armaOrder = c(final_spec[attempt,'AR'], final_spec[attempt,'MA']), include.mean = TRUE, archm = FALSE, external.regressors = NULL), variance.model = list(model = final_spec[attempt,'Model'], submodel = if(final_spec[attempt,'SubModel']==0) NULL else final_spec[attempt,'SubModel'], garchOrder = c(final_spec[attempt,'G'], final_spec[attempt,'ARCH'])),distribution.model = final_spec[attempt,'Dist'])
fit <- ugarchfit(spec, data=y, solver = final_spec[attempt,'solver'])
resid <- fit@fit$residuals
# std_resid <- (resid - mean(resid))/sd(resid)
}
df_resid <- cbind(df_resid, resid)
spec_save <- rbind(spec_save,
cbind(index, final_spec[attempt,]))
}
print("--------------------------------------------")
print("=========================================")
print("==================================================================================")
# Writes marginal_models.csv
model_output <- function(spec_save){
country_sec <- spec_save$index %>%
stringr::str_replace_all('_', ' ') %>%
lapply(FUN = simpleCap) %>%
unlist() %>%
lapply(country_sector) %>%
rbind_list()
country_sec$index <- spec_save$index
df_return <- spec_save %>%
select(index, p = AR, q = MA, r = G, s = ARCH, `Out of sample MSE` = MSE_out_Sample) %>%
mutate_if(is.numeric, round, 4) %>%
inner_join(country_sec) %>%
select(Country, Sector, p, q, r, s, `Out of sample MSE`)
df_return$Country[duplicated(df_return$Country)] <- ''
write.csv(df_return, 'finalResults//marginal_models.csv')
return(TRUE)
}
# Write model output
model_output(spec_save)
# Write filtered data
colnames(df_resid) <- c('Date',as.character(spec_save$index))
write.csv(df_resid, 'FILTERED_DATA.csv')
# Pull in functions for copula fitting
source('copulaFit.R')
df_full <- read.csv('FILTERED_DATA.csv')
colnames(df_full) <- colnames(df_full) %>%
stringr::str_replace_all('_', ' ') %>%
lapply(FUN = simpleCap) %>%
unlist()
indices <- colnames(df_full)[3:17]
df_indices <- df_full[,indices]
df_indices_std <- scale(df_indices)
copdata <- pobs(df_indices_std)
df_copula_class <- read.csv('copula_class.csv')
rvm <- RVineStructureSelect(copdata,
familyset = 1,
progress = TRUE)
rvm <- RVineStructureSelect(copdata,
familyset = 1,
progress = FALSE)
copula_results(copdata, rvm)
# Save the rvm object
saveRDS(rvm, "rvm.rds")
# Simulation Parameters
lower_perc <- 0.01
upper_perc <- 0.99
sim_size <- 1000 #10000
number_of_sims <- 10 # 500
results <- simu_TDC(rvm, lower_perc, upper_perc, sim_size, number_of_sims)
write.csv(results$aggregated_results,'finalResults//aggregated_results.csv')
write.csv(results$raw_simulations,'raw_simulations.csv')
aggregated_results <- read.csv('aggregated_results.csv')
df_final <- df_return_from_agg(aggregated_results)
write.csv(results$aggregated_results,'finalResults//aggregated_results.csv')
aggregated_results <- read.csv('finalResults//aggregated_results.csv')
df_final <- df_return_from_agg(aggregated_results)
write.csv(df_final, 'finalResults//Tail Dependence.csv')
# create finalResults directory
dir.create('finalResults', showWarnings = FALSE)
# create finalResults directory
dir.create('finalResults', showWarnings = FALSE)
version
options(scipen = 99)
#### MAIN ####
# set options for project
oldScipen <- getOption("scipen")
oldw <- getOption("warn")
options(warn = -1)
options(scipen = 99)
# create finalResults directory
dir.create('finalResults', showWarnings = FALSE)
#### Marginal Models ####
# pull in functions needed for marginal model fitting
source('filteredData.R')
df_full <- read.csv('data//CLEAN_DATA.csv')
# Descriptive Statistics
descr_stats(df_full[,3:ncol(df_full)])
# Correlation
corr(df_full)
# Steps before model fit
indices <- colnames(df_full)[3:ncol(df_full)]
df_resid <- data.frame(Date = df_full$Date)
spec_save <- data.frame()
# Model fit and residual calculations
for(index in indices){
print("==================================================================================")
print(index)
print("==================================================================================")
y <- df_full[,index]
final_spec <- fun_garch_spec(y, p_max = 3, q_max = 3, r_max = 2, s_max = 2)
fit <- NULL
resid <- NULL
attempt <- 0
while((is.null(fit) || is.null(resid)) && attempt < nrow(final_spec)){
attempt <- attempt + 1
spec=ugarchspec(mean.model = list(armaOrder = c(final_spec[attempt,'AR'], final_spec[attempt,'MA']), include.mean = TRUE, archm = FALSE, external.regressors = NULL), variance.model = list(model = final_spec[attempt,'Model'], submodel = if(final_spec[attempt,'SubModel']==0) NULL else final_spec[attempt,'SubModel'], garchOrder = c(final_spec[attempt,'G'], final_spec[attempt,'ARCH'])),distribution.model = final_spec[attempt,'Dist'])
fit <- ugarchfit(spec, data=y, solver = final_spec[attempt,'solver'])
resid <- fit@fit$residuals
# std_resid <- (resid - mean(resid))/sd(resid)
}
df_resid <- cbind(df_resid, resid)
spec_save <- rbind(spec_save,
cbind(index, final_spec[attempt,]))
}
?RVineStructureSelect
??RVineStructureSelect
#### MAIN ####
# set options for project
oldScipen <- getOption("scipen")
oldw <- getOption("warn")
options(warn = -1)
options(scipen = 99)
# create finalResults directory
dir.create('finalResults', showWarnings = FALSE)
#### Marginal Models ####
# pull in functions needed for marginal model fitting
source('filteredData.R')
df_full <- read.csv('data//CLEAN_DATA.csv')
# Descriptive Statistics
descr_stats(df_full[,3:ncol(df_full)])
# Correlation
corr(df_full)
# Steps before model fit
indices <- colnames(df_full)[3:ncol(df_full)]
df_resid <- data.frame(Date = df_full$Date)
spec_save <- data.frame()
# Model fit and residual calculations
for(index in indices){
print("==================================================================================")
print(index)
print("==================================================================================")
y <- df_full[,index]
final_spec <- fun_garch_spec(y, p_max = 3, q_max = 3, r_max = 2, s_max = 2)
fit <- NULL
resid <- NULL
attempt <- 0
while((is.null(fit) || is.null(resid)) && attempt < nrow(final_spec)){
attempt <- attempt + 1
spec=ugarchspec(mean.model = list(armaOrder = c(final_spec[attempt,'AR'], final_spec[attempt,'MA']), include.mean = TRUE, archm = FALSE, external.regressors = NULL), variance.model = list(model = final_spec[attempt,'Model'], submodel = if(final_spec[attempt,'SubModel']==0) NULL else final_spec[attempt,'SubModel'], garchOrder = c(final_spec[attempt,'G'], final_spec[attempt,'ARCH'])),distribution.model = final_spec[attempt,'Dist'])
fit <- ugarchfit(spec, data=y, solver = final_spec[attempt,'solver'])
resid <- fit@fit$residuals
# std_resid <- (resid - mean(resid))/sd(resid)
}
df_resid <- cbind(df_resid, resid)
spec_save <- rbind(spec_save,
cbind(index, final_spec[attempt,]))
}
# Write model output
model_output(spec_save)
# Write filtered data
colnames(df_resid) <- c('Date',as.character(spec_save$index))
write.csv(df_resid, 'FILTERED_DATA.csv')
#### Copula ####
# Pull in functions for copula fitting
source('copulaFit.R')
df_full <- read.csv('data//FILTERED_DATA.csv')
# for robustness check
# df_full <- df_full[df_full$X >= 1051,]
colnames(df_full) <- colnames(df_full) %>%
stringr::str_replace_all('_', ' ') %>%
lapply(FUN = simpleCap) %>%
unlist()
indices <- colnames(df_full)[3:17]
df_indices <- df_full[,indices]
df_indices_std <- scale(df_indices)
copdata <- pobs(df_indices_std)
df_copula_class <- read.csv('data//copula_class.csv')
rvm <- RVineStructureSelect(copdata,
familyset = df_copula_class$Code,
progress = TRUE)
copula_results(copdata, rvm)
# Save the rvm object
# saveRDS(rvm, "rvm.rds")
# Load the rvm object as rvm_loaded
# rvm_loaded <- readRDS("rvm.rds")
# RVineTreePlot(data=NULL, RVM=rvm, tree=1, edge.labels=c("family","theotau"))
# Simulation Parameters
lower_perc <- 0.01
upper_perc <- 0.99
sim_size <- 10000 #10000
number_of_sims <- 500 # 500
results <- simu_TDC(rvm, lower_perc, upper_perc, sim_size, number_of_sims)
write.csv(results$aggregated_results,'finalResults//aggregated_results.csv')
# write.csv(results$raw_simulations,'raw_simulations.csv')
aggregated_results <- read.csv('finalResults//aggregated_results.csv')
df_final <- df_return_from_agg(aggregated_results)
write.csv(df_final, 'finalResults//Tail Dependence.csv')
options(warn = oldw)
options(scipen = oldScipen)
# set options for project
oldScipen <- getOption("scipen")
oldw <- getOption("warn")
options(warn = -1)
options(scipen = 99)
# create finalResults directory
dir.create('finalResults', showWarnings = FALSE)
# pull in functions needed for marginal model fitting
source('filteredData.R')
df_full <- read.csv('data//CLEAN_DATA.csv')
# Descriptive Statistics
descr_stats(df_full[,3:ncol(df_full)])
# pull in functions needed for marginal model fitting
source('filteredData.R')
df_full <- read.csv('data//CLEAN_DATA.csv')
# Descriptive Statistics
descr_stats(df_full[,3:ncol(df_full)])
# Descriptive Statistics
descr_stats(df_full[,3:ncol(df_full)])
getwd()
# create finalResults directory
dir.create('finalResults', showWarnings = FALSE)
# Descriptive Statistics
descr_stats(df_full[,3:ncol(df_full)])
# Correlation
corr(df_full)
# Steps before model fit
indices <- colnames(df_full)[3:ncol(df_full)]
df_resid <- data.frame(Date = df_full$Date)
spec_save <- data.frame()
for(index in indices){
print("==================================================================================")
print(index)
print("==================================================================================")
y <- df_full[,index]
final_spec <- fun_garch_spec(y, p_max = 3, q_max = 3, r_max = 2, s_max = 2)
fit <- NULL
resid <- NULL
attempt <- 0
while((is.null(fit) || is.null(resid)) && attempt < nrow(final_spec)){
attempt <- attempt + 1
spec=ugarchspec(mean.model = list(armaOrder = c(final_spec[attempt,'AR'], final_spec[attempt,'MA']), include.mean = TRUE, archm = FALSE, external.regressors = NULL), variance.model = list(model = final_spec[attempt,'Model'], submodel = if(final_spec[attempt,'SubModel']==0) NULL else final_spec[attempt,'SubModel'], garchOrder = c(final_spec[attempt,'G'], final_spec[attempt,'ARCH'])),distribution.model = final_spec[attempt,'Dist'])
fit <- ugarchfit(spec, data=y, solver = final_spec[attempt,'solver'])
resid <- fit@fit$residuals
# std_resid <- (resid - mean(resid))/sd(resid)
}
df_resid <- cbind(df_resid, resid)
spec_save <- rbind(spec_save,
cbind(index, final_spec[attempt,]))
}
# Write model output
model_output(spec_save)
# Write filtered data
colnames(df_resid) <- c('Date',as.character(spec_save$index))
write.csv(df_resid, 'FILTERED_DATA.csv')
#### Copula ####
# Pull in functions for copula fitting
source('copulaFit.R')
df_full <- read.csv('data//FILTERED_DATA.csv')
# for robustness check
# df_full <- df_full[df_full$X >= 1051,]
colnames(df_full) <- colnames(df_full) %>%
stringr::str_replace_all('_', ' ') %>%
lapply(FUN = simpleCap) %>%
unlist()
indices <- colnames(df_full)[3:17]
df_indices <- df_full[,indices]
df_indices_std <- scale(df_indices)
copdata <- pobs(df_indices_std)
df_copula_class <- read.csv('data//copula_class.csv')
rvm <- RVineStructureSelect(copdata,
familyset = df_copula_class$Code,
progress = TRUE)
copula_results(copdata, rvm)
# Save the rvm object
# saveRDS(rvm, "rvm.rds")
# Load the rvm object as rvm_loaded
# rvm_loaded <- readRDS("rvm.rds")
# RVineTreePlot(data=NULL, RVM=rvm, tree=1, edge.labels=c("family","theotau"))
# Simulation Parameters
lower_perc <- 0.01
upper_perc <- 0.99
sim_size <- 10000 #10000
number_of_sims <- 500 # 500
results <- simu_TDC(rvm, lower_perc, upper_perc, sim_size, number_of_sims)
write.csv(results$aggregated_results,'finalResults//aggregated_results.csv')
# write.csv(results$raw_simulations,'raw_simulations.csv')
aggregated_results <- read.csv('finalResults//aggregated_results.csv')
df_final <- df_return_from_agg(aggregated_results)
write.csv(df_final, 'finalResults//Tail Dependence.csv')
options(warn = oldw)
options(scipen = oldScipen)
aggregated_results <- read.csv('finalResults//aggregated_results.csv')
df_final <- df_return_from_agg(aggregated_results)
write.csv(df_final, 'finalResults//Tail Dependence.csv')
df_final
# Pull in functions for copula fitting
source('copulaFit.R')
df_final <- df_return_from_agg(aggregated_results)
df_final
write.csv(df_final, 'finalResults//Tail Dependence.csv')
